name: Build Jellyfin Tizen AVPlay
on:
  workflow_dispatch:

permissions:
  contents: write

env:
  TIZEN_STUDIO_VER: 5.5
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout this repo
      - name: Checkout repo
        uses: actions/checkout@v4
        
      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '>=20'
          
      # 3. Install required packages
      - name: Install required packages
        run: sudo apt install expect
        
      # 4. Download Tizen Studio
      - name: Download Tizen Studio
        run: |
          curl -o tizen-installer "https://download.tizen.org/sdk/Installer/tizen-studio_${TIZEN_STUDIO_VER}/web-cli_Tizen_Studio_${TIZEN_STUDIO_VER}_ubuntu-64.bin"
          
      # 5. Install Tizen Studio
      - name: Install Tizen Studio
        run: |
          chmod +x tizen-installer
          ./tizen-installer --accept-license "${GITHUB_WORKSPACE}/tizen-studio"
          rm ./tizen-installer
          
      # 6. Create Tizen Certificate
      - name: Create Tizen Certificate
        run: |
          ${GITHUB_WORKSPACE}/tizen-studio/tools/ide/bin/tizen certificate -a Jellyfin -p 1234 -c US -s California -ct SanFrancisco -o Jellyfin -n JellyfinAvplay -e jellyfin@example.org -f jellyfinAvplay
          ${GITHUB_WORKSPACE}/tizen-studio/tools/ide/bin/tizen security-profiles add -n JellyfinAvplay -a "${GITHUB_WORKSPACE}/tizen-studio-data/keystore/author/jellyfinAvplay.p12" -p 1234
          ${GITHUB_WORKSPACE}/tizen-studio/tools/ide/bin/tizen cli-config "profiles.path=${GITHUB_WORKSPACE}/tizen-studio-data/profile/profiles.xml"
          
      # 7. Clone jellyfin-web
      - name: Clone jellyfin-web
        run: |
          git clone https://github.com/jellyfin/jellyfin-web.git
          cd jellyfin-web
          git checkout master
          
      # 8. Build jellyfin-web
      - name: Build jellyfin-web
        run: |
          cd jellyfin-web
          npm ci --no-audit
          USE_SYSTEM_FONTS=1 npm run build:production
          
      # 9. Clone upstream jellyfin-tizen
      - name: Clone jellyfin-tizen
        run: |
          git clone https://github.com/jellyfin/jellyfin-tizen.git
          cd jellyfin-tizen
          git checkout master
          
      # 10. Copy avplayVideoPlayer.js
      - name: Add avplayVideoPlayer.js
        run: |
          cp extras/avplayVideoPlayer.js jellyfin-tizen/avplayVideoPlayer.js
          
      # 11. Patch tizen.js
      - name: Patch tizen.js
        run: |
          cd jellyfin-tizen
          if [ -f tizen.js ]; then
            echo 'var plugins = { "AvplayVideoPlayer": "avplayVideoPlayer" };' >> tizen.js
          fi
          
      # 12. Patch tizen.css
      - name: Patch tizen.css
        run: |
          cd jellyfin-tizen
          if [ ! -f tizen.css ]; then
            touch tizen.css
          fi
          cat >> tizen.css << 'EOF'
          .avplayVideoPlayer {
              position: fixed !important;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
          }
          .avplayVideoPlayerOnTop {
              z-index: 1000;
          }
          EOF
          
      # 13. Patch gulpfile.babel.js
      - name: Patch gulpfile.babel.js
        run: |
          cd jellyfin-tizen
          if [ -f gulpfile.babel.js ]; then
            cat >> gulpfile.babel.js << 'EOF'
          // --- AVPlay injection start ---
          if (typeof injectTarget !== 'undefined') {
              // inject avplayVideoPlayer.js
              const avplayVideoPlayer = document.createElement("script");
              avplayVideoPlayer.setAttribute("src", "../avplayVideoPlayer.js");
              avplayVideoPlayer.setAttribute("defer", "");
              injectTarget.insertBefore(avplayVideoPlayer, apploader);
              // inject tizen.css
              const tizenCss = document.createElement("link");
              tizenCss.setAttribute("rel", "stylesheet");
              tizenCss.setAttribute("href", "../tizen.css");
              document.head.appendChild(tizenCss);
          }
          // --- AVPlay injection end ---
          EOF
          fi
          
      # 14. Patch config.xml
      - name: Patch config.xml
        run: |
          cd jellyfin-tizen
          if [ -f config.xml ]; then
            sed -i '/<tizen:privilege name="http:\/\/developer.samsung.com\/privilege\/productinfo"\/>/a <tizen:privilege name="http:\/\/tizen.org\/privilege\/download"\/>' config.xml
          fi
          
      # 15. Prepare jellyfin-tizen interface
      - name: Prepare jellyfin-tizen
        run: |
          cd jellyfin-tizen
          JELLYFIN_WEB_DIR=../jellyfin-web/dist npm ci --no-audit
          
      # 16. Build web package
      - name: Build web package
        run: |
          cd jellyfin-tizen
          ${GITHUB_WORKSPACE}/tizen-studio/tools/ide/bin/tizen build-web -e ".*" -e gulpfile.babel.js -e README.md -e "node_modules/*" -e "package*.json" -e "yarn.lock"
          
      # 17. Prepare for signing
      - name: Prepare for signing
        run: |
          sed -i "s|${GITHUB_WORKSPACE}/tizen-studio-data/keystore/author/jellyfinAvplay.pwd|1234|g" ${GITHUB_WORKSPACE}/tizen-studio-data/profile/profiles.xml
          sed -i "s|${GITHUB_WORKSPACE}/tizen-studio-data/tools/certificate-generator/certificates/distributor/tizen-distributor-signer.pwd|tizenpkcs12passfordsigner|g" ${GITHUB_WORKSPACE}/tizen-studio-data/profile/profiles.xml
          sed -i 's|password=""|password="tizenpkcs12passfordsigner"|g' ${GITHUB_WORKSPACE}/tizen-studio-data/profile/profiles.xml
          
      # 18. Create expect script for packaging
      - name: Create expect script
        run: |
          cat > package.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout -1
          spawn $env(GITHUB_WORKSPACE)/tizen-studio/tools/ide/bin/tizen package -t wgt -s JellyfinAvplay -- $env(GITHUB_WORKSPACE)/jellyfin-tizen/.buildResult
          expect "Author password:"
          send "1234\r"
          expect "Distributor1 password:"
          send "tizenpkcs12passfordsigner\r"
          expect eof
          EOF
          chmod +x package.exp
          
      # 19. Package WGT
      - name: Package WGT
        run: |
          ./package.exp
          mkdir -p release
          mv jellyfin-tizen/.buildResult/Jellyfin.wgt release/Jellyfin-AVPlay.wgt
          
      # 20. Get version and date
      - name: Get version info
        id: version
        run: |
          cd jellyfin-tizen
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          DATE=$(date +'%Y-%m-%d-%H%M')
          echo "date_tag=$DATE" >> $GITHUB_OUTPUT
          DATE_PRETTY=$(date +'%Y-%m-%d %H:%M')
          echo "date_pretty=$DATE_PRETTY" >> $GITHUB_OUTPUT
          
      # 21. Create Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ steps.version.outputs.version }}-${{ steps.version.outputs.date_tag }}'
          name: 'Jellyfin Tizen AVPlay v${{ steps.version.outputs.version }} - ${{ steps.version.outputs.date_pretty }}'
          files: release/*.wgt
          body: |
            # Jellyfin Tizen with AVPlay Support
            
            Built on ${{ steps.version.outputs.date_pretty }}
            
            ## Features
            - Based on Jellyfin Web master branch
            - Includes AVPlay video player patches for better Samsung TV compatibility
            
            ## Installation
            1. Enable Developer Mode on your Samsung TV
            2. Install the WGT file using Tizen Studio or sdb
            
            See the [README](https://github.com/${{ github.repository }}) for detailed installation instructions.
          draft: false
          prerelease: false