name: Build Jellyfin Tizen AVPlay
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout this repo
      - name: Checkout repo
        uses: actions/checkout@v4
      # 2. Clone jellyfin-web
      - name: Clone jellyfin-web
        run: |
          git clone https://github.com/jellyfin/jellyfin-web.git
          cd jellyfin-web
          git checkout master
      # 3. Build jellyfin-web
      - name: Build jellyfin-web
        run: |
          cd jellyfin-web
          npm ci --no-audit
          USE_SYSTEM_FONTS=1 npm run build:production
      # 4. Clone upstream jellyfin-tizen
      - name: Clone upstream jellyfin-tizen
        run: |
          git clone https://github.com/jellyfin/jellyfin-tizen.git
          cd jellyfin-tizen
          git checkout master
      # 5. Copy avplayVideoPlayer.js
      - name: Add avplayVideoPlayer.js
        run: |
          cp extras/avplayVideoPlayer.js jellyfin-tizen/avplayVideoPlayer.js
      # 6. Patch tizen.js safely
      - name: Patch tizen.js
        run: |
          cd jellyfin-tizen
          if [ -f tizen.js ]; then
            echo 'var plugins = { "AvplayVideoPlayer": "avplayVideoPlayer" };' >> tizen.js
          else
            echo "tizen.js not found, skipping patch"
          fi
      # 7. Patch tizen.css safely
      - name: Patch tizen.css
        run: |
          cd jellyfin-tizen
          if [ ! -f tizen.css ]; then
            touch tizen.css
          fi
          cat >> tizen.css << 'EOF'
          .avplayVideoPlayer {
              position: fixed !important;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
          }
          .avplayVideoPlayerOnTop {
              z-index: 1000;
          }
          EOF
      # 8. Patch gulpfile.babel.js safely
      - name: Patch gulpfile.babel.js
        run: |
          cd jellyfin-tizen
          if [ -f gulpfile.babel.js ]; then
            cat >> gulpfile.babel.js << 'EOF'
          // --- AVPlay injection start ---
          if (typeof injectTarget !== 'undefined') {
              // inject avplayVideoPlayer.js
              const avplayVideoPlayer = document.createElement("script");
              avplayVideoPlayer.setAttribute("src", "../avplayVideoPlayer.js");
              avplayVideoPlayer.setAttribute("defer", "");
              injectTarget.insertBefore(avplayVideoPlayer, apploader);
              // inject tizen.css
              const tizenCss = document.createElement("link");
              tizenCss.setAttribute("rel", "stylesheet");
              tizenCss.setAttribute("href", "../tizen.css");
              document.head.appendChild(tizenCss);
          }
          // --- AVPlay injection end ---
          EOF
          else
            echo "gulpfile.babel.js not found, skipping patch"
          fi
      # 9. Patch config.xml safely
      - name: Patch config.xml
        run: |
          cd jellyfin-tizen
          if [ -f config.xml ]; then
            sed -i '/<tizen:privilege name="http:\/\/developer.samsung.com\/privilege\/productinfo"\/>/a <tizen:privilege name="http:\/\/tizen.org\/privilege\/download"\/>' config.xml
          else
            echo "config.xml not found, skipping patch"
          fi
      # 10. Prepare jellyfin-tizen with web
      - name: Prepare jellyfin-tizen interface
        run: |
          cd jellyfin-tizen
          JELLYFIN_WEB_DIR=../jellyfin-web/dist npm ci --no-audit
      # 11. Create WGT package manually
      - name: Create WGT package
        run: |
          cd jellyfin-tizen
          # Create the build output directory structure
          mkdir -p .buildResult/www
          mkdir -p .buildResult/res
          
          # Copy built web files
          cp -r www/* .buildResult/www/ 2>/dev/null || echo "Copying www files"
          
          # Copy config and other necessary files
          cp config.xml .buildResult/
          cp icon.png .buildResult/res/ 2>/dev/null || echo "Icon optional"
          
          # Create the WGT (which is just a ZIP file with .wgt extension)
          cd .buildResult
          zip -r ../Jellyfin.wgt . -x "node_modules/*" "*.git*" ".github/*"
          cd ..
          ls -la Jellyfin.wgt
      # 13. Get Jellyfin version for artifact name
      - name: Get Jellyfin version
        id: version
        run: |
          cd jellyfin-tizen
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          DATE=$(date +'%Y-%m-%d')
          echo "date=$DATE" >> $GITHUB_OUTPUT
      # 14. Upload WGT artifact
      - name: Upload WGT artifact
        uses: actions/upload-artifact@v4
        with:
          name: jellyfin-tizen-avplay-${{ steps.version.outputs.version }}-${{ steps.version.outputs.date }}
          path: jellyfin-tizen/*.wgt
          if-no-files-found: warn
